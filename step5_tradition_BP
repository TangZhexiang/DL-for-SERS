%% 预处理完后第一步，BP神经网络预测浓度,因为数据量较少，测试集和训练集完全一样
%% 数据读取
clc,clear,close all
data = xlsread('标准数据示例.xlsx');   %xlsread读取数据
[hs,ls]=size(data);         %得出数据的维度
x = data(2:hs,1); 
i=2:ls;                  
y = data(2:hs,i);             %y取了xls文件中去掉头尾两列的所有列
concentration = data(1,2:ls);
%% 扣除基线
for i=2:ls                 %这一段其实是网上SPA去趋势方法,每一列每一列地去除趋势
    dat=data(2:hs,i);          %dat 分别读取了data中的每一列数据
    N=length(dat);              % N = 1050
    lambda=5000;
    I=speye(N);                   %将产生一个N*N的稀疏矩阵，对角线上的值为1
    D2 = spdiags(ones(N-2,1)*[1 -2 1],[0 1 2],N-2,N);  %高通滤波，但是原理不知道
    %这条命令返回带状稀疏矩阵，D2的大小为1013 * 1015
    %ones(N-2,1)*[1 -2 1]为1013*3的数组，一三两列是1，第二列是-2  N-2，N分别指定了
    %行和列的维数,将会得到对角线分别为1 -2 1的矩阵，为什么要N-2 因为要对称啊，
    %三条“对角线”
    trend = (I+lambda^2*(D2'*D2))\dat;%将inv改为/可以增加运算速度
    %     D2*D2'为1013*1013的矩阵
    y=dat-trend;
    jxoutput(:,i-1)=(y);
end
%以上循环是对每一条曲线都拉基线，dat是原始数据，y是拉完基线后的数据，最后每组拉完基线后的数据
%都会在jxoutput中。
% plot(x,dat,'r');
% hold on;
% plot(x,y)
% title('最后一组拉基线对比图')
% legend('原始数据','拉完基线后')
% xlabel('波数'),ylabel('峰值强度');
%% 小波滤波
result=zeros(ls-1,hs-1);         %建立一个30*1015的零矩阵
k=1;
for i=1:ls-1
    ss=jxoutput(:,i)';
    s=ss(1:N);
    % plot(x,s);
    % xlabel('波数');
    % ylabel('幅值 A');
    % title('原始信号');
    [c,l]=wavedec(s,3,'db1'); %wavedec就是小波分解，将一个信号分解成指定层数n，并返回各层的小波系数。
    %此处是对信号s用小波db1进行三层分解
    a3=appcoef(c,l,'db1',3);            %取分解后的近似部分，也就是第三层低频系数
    d3=detcoef(c,l,3);                  %取分解后的细节部分，第三层高频系数
    d2=detcoef(c,l,2);%app是近似，dec是细节，coefs 是小波变换后的返回系数Wf(a,b)矩阵
    d1=detcoef(c,l,1);
    softd1=wthresh(d1,'s',70);    %wthresh函数根据sorh的值计算分解系数的软阈值或硬阈值
    softd2=wthresh(d2,'s',70);
    softd3=wthresh(d3,'s',70);
    c2=[a3,softd3,softd2,softd1];
    s3=waverec(c2,l,'db1');           %将给定的小波完全一次性重构出信号
    %  subplot(h2);    整体代码里面有这一段，h1是定义的坐标轴
    %下面这一段代码是作图用的，依次作出曲线软阈值消噪后的结果
    % plot(x,s3,'LineWidth',1);
    % xlabel('波数');
    % ylabel('幅值 A');
    % title('给定软阈值消噪后的信号');
    result(k,1:N)=s3;
    k=k+1;
end
% figure(2)
% plot(x,result');
% title('所有曲线给定软阈值消噪后的信号');
% xlabel('波数'),ylabel('峰值强度');
%% 峰值定位
aa=result;      %aa是给定软阈值消噪后的结果
bb=jxoutput';  
x = x';
xx=x(1,:);                 %  xx将x的内容全部取了出来，差不多就是赋值了
t=1;
for kk=1:ls-1
    yy=aa(kk,:);       %每次循环，yy取aa的一行，就是依次取出给定软阈值消噪后的每一行
    qjxqd=bb(kk,:);              %取基线求导，每次循环qjxqd取bb的一行
    [v,l]=findpeaks(yy,'minpeakheight',200,'minpeakdistance',10);   %%%这里的参数其实还有优化空间,
    %l返回峰的横坐标，v返回峰的纵坐标
    fz=bb(kk,l);
    if size(l,2)>1            %size(l,2)判断l有几列，就是取到了几个特征峰
        zz=x(1,l(1,:));        %l(1,:)对应特征峰的横坐标的排序，zz则为特征峰的纵坐标
        fz=bb(kk,l);           %fz为特征峰的峰值
    else
        zz(1,8)=0;            %将zz数组1行*8列的数据空的用0补齐
        fz(1,8)=0;            %将fz数组1行*8列的数据空的用0补齐
    end
    n=1;
    cc=[zz;fz(1,:)];             %cc为一个两行的矩阵，列数为提取的特征峰个数，第一行为纵坐标，第二行为峰值
    cc=cc';                 %cc转置后变一个两列的矩阵，行数为提取的特征峰个数，第一列为纵坐标，第二列为峰值
    d=sortrows(cc,-2);      %d矩阵就是将cc矩阵第一列（纵坐标）从低到高排序后的结果
    if size(d,1)>8           %size(d,1)取的是d矩阵的列数，同样是提取到的特征峰的个数
        dd=d(1:8,:);         %如果dd矩阵提取到的特征峰的个数大于8，也只取前八个
    elseif size(d,1)<8||size(d,1)>0       %一般来说都是这种情况，提取到的特征峰个数在0-8之间
        dd=d(1:size(d,1),:);              %dd取了前6行所有列，就是相当于全取了
        dd(size(d,1)+1:8,:)=0;         %然后将剩下的列填充0，填到8个为止
    else
        dd(8,:)=0;                    %将dd矩阵扩充到8行并且缺省值用0替代
    end
    tzf(:,2*t-1:2*t)=(dd);           %不断将dd矩阵写入到特征峰中去，一条曲线两列，第一列特征峰波数，第二列特征峰峰高
    t=t+1;
end
A =tzf;                              %为什么后面的曲线取到的特征峰少，因为findpeaks函数设置的参数不同
% hh=figure;
% t1=uitable('position',[50 50 500 300]);
% set(t1,'data',A)

%% BP神经网络
%下面开始BP神经网络的处理，我们应该利用最后提取出来的数据tzf
SamNum=ls-1;             %输入样本数量
TestSamNum=ls-1;         %测试样本数量,此处由于样本较少，训练集和测试集一样
ForcastSamNum=1;       %预测样本数量为1
HiddenUnitNum=8;       %中间隐藏层节点数量取8
InDim=8;               %网络输入维数为8
OutDim=1;              %网络输出维数为1     这是一个8-8-1的神经网络  其实这里的隐含层l可以取 1 2 3
%sr为什么都只取偶数列？   tzf一条曲线两列，第一列特征峰波数，第二列特征峰峰高
sr1=tzf(1,2:2:end);  %选中数组的第一行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第一个特征峰的峰高
sr2=tzf(2,2:2:end);  %选中数组的第二行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第二个特征峰的峰高
sr3=tzf(3,2:2:end);  %选中数组的第三行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第三个特征峰的峰高
sr4=tzf(4,2:2:end);  %选中数组的第四行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第四个特征峰的峰高
sr5=tzf(5,2:2:end);  %选中数组的第五行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第五个特征峰的峰高
sr6=tzf(6,2:2:end);  %选中数组的第六行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第六个特征峰的峰高
sr7=tzf(7,2:2:end);  %选中数组的第七行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第七个特征峰的峰高
sr8=tzf(8,2:2:end);  %选中数组的第八行，从数组的第二列开始，每隔一列取一列，全取,取了每条曲线第八个特征峰的峰高
r6g=concentration;  %r6g应该是度的幂次
p=[sr1;sr2;sr3;sr4;sr5;sr6;sr7;sr8];             %只取了所有曲线八条特征峰的峰高，没有取拉曼位移
tt=concentration;
%新的归一化方法
[SamIn,PS1] = mapminmax(p,-1,1);
minp = min(p,[],2);
maxp = max(p,[],2);
[tn,PS2] = mapminmax(tt,-1,1);
mint = min(tt,[],2);
maxt = max(tt,[],2);
% [SamIn,minp,maxp,tn,mint,maxt]=premnmx(p,tt); %这里是归一化处理，前六个参数分别对应为
%SamIn的归一化结果、p每行的最小值、p每行的最大值、t矩阵的归一化结果、t矩阵的最大值、t矩阵的最小值
%后两个参数分别对应为p矩阵和tt矩阵,p  tt分别对应原始输入和输出数据
%这个归一化其实可以用新的结果
%前后三个返回参数分别对p,tt两个参数做归一化处理
rand('state',sum(100*clock));    %一种更加彻底的随机数生成方式
NoiseVar=0.01;                 %噪声因子为0.01
Noise=NoiseVar*randn(1,SamNum);
SamOut=tn + Noise;
TestSamIn=SamIn;
TestSamOut=SamOut;
MaxEpochs=50000;              %最大批尺度（最大迭代次数）为50000
lr=0.035;                     %学习率为0.035
E0=0.65*10^(-3);              %目标，当误差降低到E0以下就停止迭代
W1=0.4*rand(HiddenUnitNum,InDim)-0.1;
B1=0.4*rand(HiddenUnitNum,1)-0.1;
W2=0.4*rand(OutDim,HiddenUnitNum)-0.1;
B2=0.4*rand(OutDim,1)-0.1;
ErrHistory=[];
%开始重复学习并且更新权值
for i=1:MaxEpochs                %数据量虽然少，但是他算了50000次
    HiddenOut=logsig(W1*SamIn+repmat(B1,1,SamNum));
    NetworkOut=W2*HiddenOut+repmat(B2,1,SamNum);
    Error=SamOut-NetworkOut;
    SSE=sumsqr(Error);            %sumsqr求矩阵的平方和函数，这里是在算均方误差吗？
    ErrHistory=[ErrHistory SSE];
    if SSE<E0
        break
    end
    Delta2=Error;
    Delta1=W2'*Delta2.*HiddenOut.*(1-HiddenOut);
    dW2=Delta2*HiddenOut';
    dB2=Delta2*ones(SamNum,1);
    dW1=Delta1*SamIn';
    dB1=Delta1*ones(SamNum,1);
    W2=W2+lr*dW2;
    B2=B2+lr*dB2;
    W1=W1+lr*dW1;
    B1=B1+lr*dB1;
end
HiddenOut=logsig(W1*SamIn+repmat(B1,1,TestSamNum)); %%%晚上从这里开始分析
NetworkOut=W2*HiddenOut+repmat(B2,1,TestSamNum);    %这次是真的输出结果了
a=postmnmx(NetworkOut,mint,maxt);
x=1:ls-1;
newk=a(1,:);         %BP神经网络输出预测值
figure(1);
plot(x,newk,'r-o',x,r6g,'b--+');
legend('网络输出预测','实际');
title('BP神经网络输出结果')
xlabel('样品编号');
ylabel('10的y次幂');
%自己加了一行，用来计算误差
Predict_error = newk-r6g;
%plot(Predict_error)
first_error = mse(Predict_error);
a_predict_result = sqrt(first_error);    %均方根误差RMSE


pnew=tzf(:,10);         %这里取到了特征峰的最后一列数据，就是待测物特征峰的峰高
pnewn=mapminmax(pnew,minp,maxp);   %归一化
HiddenOut=logsig(W1*pnewn+repmat(B1,1,ForcastSamNum));
anewn=W2*HiddenOut+repmat(B2,1,ForcastSamNum);
anew=postmnmx(anewn,mint,maxt);

%% 浓度输出报告
concentration_wanted = newk(end);         %这里输出的还是浓度的幂次方
disp(['该样品的浓度为:10^',num2str(concentration_wanted)])
concentration_demo = 10^concentration_wanted;
disp(['等价于该样品的浓度为:',num2str(concentration_demo)])
